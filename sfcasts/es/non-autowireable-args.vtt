WEBVTT

00:00:01.066 --> 00:00:03.976 align:middle
Anteriormente, aprendimos que podemos
obtener parámetros del contenedor

00:00:03.976 --> 00:00:05.936 align:middle
con getParameter() en nuestro controlador.

00:00:06.446 --> 00:00:09.456 align:middle
También vimos lo fácil que es
crear nuestros propios servicios.

00:00:09.786 --> 00:00:10.406 align:middle
¿Y adivina qué?

00:00:10.686 --> 00:00:12.486 align:middle
¡No es lo único que podemos personalizar!

00:00:12.806 --> 00:00:14.936 align:middle
También podemos crear
nuestros propios parámetros.

00:00:15.356 --> 00:00:16.736 align:middle
¿Cómo? Te lo enseñaré

00:00:17.156 --> 00:00:19.196 align:middle
Abre config/services.yaml.

00:00:20.056 --> 00:00:22.296 align:middle
Aquí, vemos una sección parameters vacía.

00:00:22.796 --> 00:00:29.856 align:middle
Dentro, vamos a crear un nuevo parámetro -qué tal
iss_location_cache_ttl - y vamos a establecerlo en 5.

00:00:30.636 --> 00:00:34.656 align:middle
Utilizaremos este parámetro en la
configuración para evitar codificar nada.

00:00:35.276 --> 00:00:41.036 align:middle
Pero antes, vuelve a MainController.php,
y en lugar de volcar kernel.project_dir,

00:00:41.166 --> 00:00:45.066 align:middle
volquemos nuestro nuevo
parámetro: iss_location_cache_ttl.

00:00:45.726 --> 00:00:47.996 align:middle
En nuestro navegador, actualiza y...

00:00:48.696 --> 00:00:49.856 align:middle
ahí está: ¡5!

00:00:50.556 --> 00:00:53.996 align:middle
Ahora, sabemos que podemos cogerlo con
getParameter() en nuestros controladores.

00:00:54.276 --> 00:00:56.466 align:middle
Pero, ¿qué hacemos si no
estamos en un controlador?

00:00:56.826 --> 00:01:01.336 align:middle
¿Cómo podemos utilizar parámetros en los
servicios sin este elegante método getParameter()?

00:01:01.956 --> 00:01:02.426 align:middle
Veamos...

00:01:02.766 --> 00:01:08.956 align:middle
Si añadimos un nuevo argumento a la página de inicio
- $issLocationCacheTtl - y volcamos esto en lugar

00:01:08.956 --> 00:01:11.556 align:middle
de getParameter(), cuando actualicemos...

00:01:12.376 --> 00:01:15.266 align:middle
¡error! Symfony no puede
autocablear ese argumento.

00:01:15.626 --> 00:01:19.536 align:middle
Puede autocablear servicios, pero esto
no es un servicio; es un parámetro.

00:01:20.196 --> 00:01:21.336 align:middle
Entonces, ¿cómo lo hacemos?

00:01:21.786 --> 00:01:23.476 align:middle
La respuesta: ¡Autoconectarlo!
Podemos autocablear

00:01:23.986 --> 00:01:28.046 align:middle
parámetros como si fueran servicios,
y funcionará en el constructor

00:01:28.046 --> 00:01:30.466 align:middle
o controlador igual que el autocableado normal.

00:01:31.036 --> 00:01:31.546 align:middle
¡Compruébalo!

00:01:32.016 --> 00:01:36.096 align:middle
De vuelta a nuestro código, vamos a añadir
el atributo autowire encima del argumento.

00:01:36.526 --> 00:01:43.086 align:middle
Escribe #[Autowire()] y, dentro,
param: 'iss_location_cache_ttl'.

00:01:43.956 --> 00:01:46.286 align:middle
De vuelta a nuestro navegador,
si actualizamos la página...

00:01:47.126 --> 00:01:48.566 align:middle
¡5! ¡Funciona!

00:01:49.236 --> 00:01:53.096 align:middle
Vale, vamos a quitar eso y a ver cómo podemos utilizar
nuestro nuevo parámetro en nuestra configuración.

00:01:54.356 --> 00:01:57.166 align:middle
Abre config/packages/cache.yaml.

00:01:58.036 --> 00:02:03.906 align:middle
En lugar de este valor codificado,
pon %iss_location_cache_ttl%.

00:02:04.796 --> 00:02:06.076 align:middle
Si lo comprobamos en nuestro navegador...

00:02:08.216 --> 00:02:09.276 align:middle
¡todo sigue funcionando!

00:02:09.476 --> 00:02:14.606 align:middle
¡Fantástico! Antes de continuar, quiero
mostrarte otra forma de autoenlazar parámetros:

00:02:14.866 --> 00:02:15.996 align:middle
la vinculación de parámetros.

00:02:16.566 --> 00:02:23.276 align:middle
Abre services.yaml y, en services, debajo de
_defaults, añade una nueva sección: bind.

00:02:24.016 --> 00:02:26.096 align:middle
Dentro, añade nuestro nombre de variable -

00:02:26.456 --> 00:02:33.856 align:middle
$issLocationCacheTtl - ajustado a
%iss_location_cache_ttl%. En cuanto hagamos

00:02:34.706 --> 00:02:37.806 align:middle
coincidir el argumento con el
nombre que escribimos en bind,

00:02:37.926 --> 00:02:41.116 align:middle
Symfony lo autoenlazará
automáticamente a este parámetro.

00:02:42.806 --> 00:02:45.746 align:middle
También podemos añadir una
sugerencia de tipo - int -

00:02:45.976 --> 00:02:51.166 align:middle
en caso de que queramos autoconectar $issLocationCacheTtl
con una sugerencia de tipo requerida.

00:02:51.866 --> 00:02:55.636 align:middle
En MainController.php, tenemos
que añadir int aquí también.

00:02:56.406 --> 00:02:57.146 align:middle
Cuando lo probamos...

00:02:58.466 --> 00:02:59.226 align:middle
¡también funciona!

00:02:59.656 --> 00:03:01.396 align:middle
Y como estamos autocableando globalmente,

00:03:01.686 --> 00:03:06.206 align:middle
evitamos duplicar nuestros atributos
PHP autocableados en varios sitios.

00:03:06.646 --> 00:03:07.366 align:middle
¡Súper práctico!

00:03:08.126 --> 00:03:11.646 align:middle
Como actualmente no estamos utilizando ese parámetro
en ningún sitio excepto en nuestra configuración,

00:03:11.956 --> 00:03:13.166 align:middle
podemos deshacernos de él por ahora.

00:03:14.056 --> 00:03:18.376 align:middle
A continuación: Veamos cómo podemos
autocablear servicios no autocableables.

00:03:18.646 --> 00:03:19.866 align:middle
Es sorprendentemente fácil.
