WEBVTT

00:00:01.036 --> 00:00:04.256 align:middle
¡Nuestra base de datos está ahora llena
de brillantes naves estelares ficticias!

00:00:04.526 --> 00:00:07.586 align:middle
Pero esta página de inicio sigue
mostrando las naves codificadas.

00:00:07.886 --> 00:00:10.816 align:middle
¡Qué pena! Es hora de
cargarlas desde la base de datos.

00:00:11.086 --> 00:00:13.826 align:middle
¡Eso mejorará la genialidad
de nuestra aplicación x10!

00:00:14.586 --> 00:00:15.736 align:middle
Ve a tu terminal.

00:00:16.106 --> 00:00:19.116 align:middle
¿Recuerdas la consulta SQL para
seleccionar todas las naves?

00:00:19.496 --> 00:00:27.866 align:middle
Ejecútala de nuevo: symfony console doctrine:query:sql
'select * from starship' Eso es SQL en bruto

00:00:28.056 --> 00:00:33.626 align:middle
, pero el ORM de Doctrine tiene su propio lenguaje de
consulta llamado DQL: Lenguaje de Consulta Doctrine

00:00:34.096 --> 00:00:39.446 align:middle
Es como SQL, pero en lugar de consultar a partir
de tablas, con DQL piensas en términos de

00:00:39.446 --> 00:00:41.806 align:middle
consulta a los objetos entidad.

00:00:42.266 --> 00:00:50.096 align:middle
Ejecuta la misma consulta anterior pero como
DQL: symfony console doctrine:query:dql 'select s

00:00:50.186 --> 00:00:55.926 align:middle
from App\Entity\Starship s'
Esto parece un poco raro,

00:00:56.226 --> 00:01:01.566 align:middle
pero es PHP volcando nuestros objetos Starship -
y hay tres, igual que en la consulta sin procesar.

00:01:02.136 --> 00:01:04.376 align:middle
Aprovechemos esto en nuestro
controlador de página de inicio.

00:01:04.906 --> 00:01:09.926 align:middle
Abre src/Controller/MainController.php
y busca el método homepage().

00:01:10.496 --> 00:01:15.276 align:middle
En lugar de inyectar este StarshipRepository
(es el antiguo del directorio Model ),

00:01:15.596 --> 00:01:19.526 align:middle
sustitúyelo por
EntityManagerInterface $em de Doctrine.

00:01:20.276 --> 00:01:24.006 align:middle
En el último capítulo, vimos
que Doctrine pasa un ObjectManager

00:01:24.206 --> 00:01:26.456 align:middle
al método AppFixture::load().

00:01:27.046 --> 00:01:31.546 align:middle
Este EntityManagerInterface es un tipo
de ObjectManager y es lo que utilizaremos

00:01:31.546 --> 00:01:33.666 align:middle
para autocablear el gestor
de entidades de Doctrine.

00:01:34.316 --> 00:01:40.496 align:middle
A continuación, escribe: $ships =
$em->createQuery() y pasa la cadena DQL:

00:01:40.856 --> 00:01:47.396 align:middle
SELECT s FROM App\Entity\Starship s.
Por último, llama a ->getResult().

00:01:47.816 --> 00:01:53.166 align:middle
Esto ejecuta la consulta, coge los datos pero
devuelve una matriz de objetos Starship en lugar

00:01:53.166 --> 00:01:55.156 align:middle
de los datos sin procesar,
¡lo cual es asombroso!

00:01:55.746 --> 00:01:57.276 align:middle
Deja el resto del método como está.

00:01:57.756 --> 00:01:59.586 align:middle
Gira y actualiza la página de inicio.

00:02:00.306 --> 00:02:01.396 align:middle
Está básicamente igual...

00:02:01.646 --> 00:02:02.466 align:middle
¡eso es buena señal!

00:02:02.906 --> 00:02:07.396 align:middle
Fíjate bien en la barra de herramientas de
depuración web: hay una nueva sección "Doctrine".

00:02:07.756 --> 00:02:08.666 align:middle
OooooooOooo.

00:02:09.096 --> 00:02:11.236 align:middle
Haz clic para abrir el panel
del perfilador "Doctrine".

00:02:11.766 --> 00:02:16.546 align:middle
Es genial. Muestra todas las consultas que
se ejecutaron durante la última petición.

00:02:17.066 --> 00:02:19.186 align:middle
Sólo vemos una: ¡tiene sentido!

00:02:19.646 --> 00:02:24.516 align:middle
Podemos ver una consulta formateada que es más
legible, una consulta ejecutable que podemos copiar

00:02:24.516 --> 00:02:28.536 align:middle
y pegar en nuestra herramienta SQL
favorita, un botón "Explicar consulta"

00:02:28.536 --> 00:02:32.366 align:middle
para ver información específica de la base
de datos sobre cómo se ejecutó la consulta,

00:02:32.726 --> 00:02:34.666 align:middle
y un "Ver rastreo de consulta".

00:02:35.106 --> 00:02:36.146 align:middle
¡Éste es mi favorito!

00:02:36.526 --> 00:02:39.196 align:middle
Muestra la pila de llamadas
que condujo a esta consulta.

00:02:39.566 --> 00:02:44.766 align:middle
Resulta muy útil para averiguar qué código desencadenó
la consulta, en este caso, nuestro método homepage().

00:02:45.546 --> 00:02:48.126 align:middle
Una pega es que el DQL no es muy bonito

00:02:48.656 --> 00:02:50.926 align:middle
Por suerte, Doctrine tiene un
"constructor de consultas".

00:02:51.386 --> 00:02:56.506 align:middle
Esta cosa es impresionante: en lugar de escribir la
cadena DQL manualmente, la construimos con un objeto.

00:02:56.506 --> 00:02:57.616 align:middle
De vuelta a nuestro método homepage()

00:02:57.616 --> 00:03:02.996 align:middle
, sustituye $em->createQuery()
por $em->createQueryBuilder().

00:03:03.596 --> 00:03:09.646 align:middle
Fuera de él, encadena ->select('s'),
luego ->from(Starship::class,

00:03:09.866 --> 00:03:12.926 align:middle
's') golpeando la pestaña añade
la declaración use de App\Entity.

00:03:13.646 --> 00:03:16.826 align:middle
¡Bonus! Podemos utilizar
Starship::class en lugar de la cadena.

00:03:17.836 --> 00:03:21.786 align:middle
Por último, antes de ->getResult(),
llama a ->getQuery().

00:03:22.826 --> 00:03:25.016 align:middle
De vuelta en la aplicación,
actualiza la página de inicio...

00:03:25.626 --> 00:03:26.436 align:middle
¡todavía funciona!

00:03:26.916 --> 00:03:28.696 align:middle
Aún tenemos que refactorizar una cosa.

00:03:29.136 --> 00:03:30.196 align:middle
Haz clic en una de las naves...

00:03:30.626 --> 00:03:33.006 align:middle
¡oh no! Nave estelar no encontrada.

00:03:33.526 --> 00:03:38.986 align:middle
Ahh, nuestra acción StarshipController::show()
sigue utilizando el antiguo StarshipRepository

00:03:38.986 --> 00:03:40.226 align:middle
con los datos codificados.

00:03:40.686 --> 00:03:41.626 align:middle
¡Tenemos que arreglarlo!

00:03:42.386 --> 00:03:47.436 align:middle
Abre src/Controller/StarshipController.php
y busca el método show().

00:03:47.956 --> 00:03:49.696 align:middle
Como necesitamos consultar los datos,

00:03:49.906 --> 00:03:55.666 align:middle
sustituye StarshipRepository $repository
por EntityManagerInterface $em.

00:03:56.386 --> 00:03:59.716 align:middle
En este caso, la consulta es tan
sencilla que hay un método abreviado.

00:04:00.266 --> 00:04:06.876 align:middle
Escribe $ship =
$em->find(Starship::class, $id).

00:04:07.556 --> 00:04:12.766 align:middle
El primer argumento de find() es la clase de
entidad que queremos obtener, y el segundo es el ID.

00:04:13.226 --> 00:04:15.296 align:middle
¡Así de fácil! Vuelve a la aplicación y...

00:04:15.366 --> 00:04:17.346 align:middle
actualiza. ¡Funciona!

00:04:17.806 --> 00:04:22.326 align:middle
Mira la barra de herramientas de depuración web: se ha
ejecutado una única consulta para obtener la nave estelar.

00:04:22.976 --> 00:04:24.836 align:middle
Ya hemos acabado con nuestro
antiguo directorio Model/.

00:04:25.256 --> 00:04:29.896 align:middle
Bueno, casi, el StarshipStatusEnum sigue
siendo necesario, así que muévelo

00:04:29.896 --> 00:04:31.836 align:middle
a Entity/ para mantener las cosas organizadas.

00:04:32.246 --> 00:04:34.226 align:middle
PhpStorm se encargará de renombrarlo.

00:04:34.856 --> 00:04:37.466 align:middle
Ahora, borra src\Model y ¡celebra!

00:04:37.826 --> 00:04:39.446 align:middle
¡Me encanta borrar código sin usar!

00:04:40.236 --> 00:04:43.436 align:middle
¡Siguiente paso! Vamos a echar un vistazo
a los repositorios de entidades como forma

00:04:43.436 --> 00:04:46.206 align:middle
de mover la lógica de consulta
fuera de nuestros controladores.
